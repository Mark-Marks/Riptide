import{_ as s,o as i,c as a,R as e}from"./chunks/framework.b72w6-dR.js";const y=JSON.parse('{"title":"Style Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/guides/style-guide.md","filePath":"guide/guides/style-guide.md"}'),n={name:"guide/guides/style-guide.md"},l=e(`<h1 id="style-guide" tabindex="-1">Style Guide <a class="header-anchor" href="#style-guide" aria-label="Permalink to &quot;Style Guide&quot;">​</a></h1><p>Riptide is styled according to a specific style guide, which helps create clean code.</p><h3 id="general-style" tabindex="-1">General Style <a class="header-anchor" href="#general-style" aria-label="Permalink to &quot;General Style&quot;">​</a></h3><ul><li><strong>Variables</strong> All variables are <code>PascalCase</code></li><li><strong>Functions</strong> All functions are <code>PascalCase</code></li><li><strong>Arguments</strong> All function arguments are <code>PascalCase</code></li><li><strong>Tables</strong> All tables are <code>PascalCase</code></li><li><strong>Types</strong> All types are <code>PascalCase</code>. Types should be declared for all top level variables &amp; function arguments.</li></ul><h3 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;Comments&quot;">​</a></h3><p>Code should be as lightly commented as possible - the code you write should describe itself. The only exception to this are public facing functions, which should always be documented.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--[=[</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    Creates a new cached signal.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    Cached signals utilize \`red-blox/signal\` under the hood. The only difference is that they&#39;re cached - each Signal has a name, and you can get each Signal from anywhere in your codebase.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    @within Riptide</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    @param Name string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    @return Signal&lt;Args&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">]=]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Riptide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CachedSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...&gt;(Name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): Signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;T...&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SignalCache[Name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SignalCache[Name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;T...&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SignalCache[Name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NewSignal</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NewSignal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,7),t=[l];function h(p,r,d,k,c,g){return i(),a("div",null,t)}const u=s(n,[["render",h]]);export{y as __pageData,u as default};
